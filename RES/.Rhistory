Impression == "Dominante" ~ "Dominant",
Impression == "Conversation" ~ "Conversation",
Impression == "Temps" ~ "Time",
Impression == "Voisin" ~ "Live Nearby",
Impression == "Assis" ~ "Seated",
TRUE ~ Impression
))
impressions_patient_combined = bind_rows(
impressions_long_patient %>% mutate(Dataset = "Dataset 1"),
impressions_long_patient_2 %>% mutate(Dataset = "Dataset 2")
)
item_plot= ggplot(impressions_patient_combined, aes(x = Impression, y = Score, fill = Dataset)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(0.9), width = 0.2) +
theme_minimal() +
labs(title = "Ratings of first impression for individuals with schizophrenia with and without diagnosis disclosure",
x = "First impression",
y = "Average score") +
scale_fill_manual(
values = c("Dataset 1" = "steelblue", "Dataset 2" = "lightblue"),
labels = c("Dataset 1" = "ISZ - no label", "Dataset 2" = "ISZ - with label")
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 10)
)
item_plot
setwd(RES_PATH)
ggsave("full_plot.png", plot = full_plot, width = 8, height = 6, dpi = 300)
ggsave("item_plot.png", plot = item_plot, width = 8, height = 6, dpi = 300)
################################################################################
########################## Clinical High Risk - mimicry ########################
################################################################################
########################### Step 1: Initialize #################################
### Library
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
library(signal)
library(openxlsx)
library(ggplot2)
### Set directory
PRG_PATH = dirname(rstudioapi::getSourceEditorContext()$path)
PATH = dirname(PRG_PATH)
DAT_PATH = file.path(PATH, "DAT")
LIB_PATH = file.path(PRG_PATH, "LIB")
RES_PATH = file.path(PATH, "RES")
### Execute the function
source(file.path(LIB_PATH, "detect_peaks.R"))
source(file.path(LIB_PATH, "find_negative_crossings.R"))
### Load the group info
group_info = read_excel(paste0(PATH, "/group_info.xlsx"))
########################## Step 2: Detect smiles ###############################
###################### V1: threshold = 1 mean + SD #############################
fichiers = list.files(DAT_PATH, pattern = "\\.xlsx$", full.names = TRUE)
all_smiles = list()
clean_data = function(data) {
data$Happy = as.numeric(as.character(data$Happy))
data$Happy[is.na(data$Happy)] = mean(data$Happy, na.rm = TRUE)
return(data)
}
for (fichier in fichiers) {
nom_fichier = tools::file_path_sans_ext(basename(fichier))
data = read_excel(fichier, skip = 10)
data[data == "FIT FAILED"] = 0
data = clean_data(data)
if (any(is.na(data$Happy))) {
stop("Il y a encore des NA dans la colonne Happy après nettoyage.")
}
## Graph
ordre = 1
freq_coupure = 0.05
coefs = butter(ordre, freq_coupure, type = "low")
filtered = filter(coefs, data$Happy)
threshold = mean(data$Happy) + 1 * sd(data$Happy)
## Smile detection
signal = filtered
distance_min = 5
indice_max_distance = 50
smiles_f = detect_peaks(signal, threshold, distance_min, indice_max_distance)
smiles_f$peak_end = find_negative_crossings(signal, threshold)
smiles_f$peak_start[is.na(smiles_f$peak_start)] = 0
smiles_f$peak_max[is.na(smiles_f$peak_max)] = 0
smiles_f$peak_end[is.na(smiles_f$peak_end)] = 0
## Correction
# nb of peak
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
i = 1
while (i <= length_diff_IP) {
if (!is.na(smiles_f$peak_end[i]) && smiles_f$peak_end[i] < smiles_f$peak_max[i]) {
smiles_f$peak_end[i] = smiles_f$peak_end[i + 1]
smiles_f$peak_end = smiles_f$peak_end[-(i + 1)]
length_diff_IP = length_diff_IP - 1
} else {
i = i + 1
}
}
# peak_end inf to peak_max
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
i = 1
while (i <= length(smiles_f$peak_start)) {
if (!is.na(smiles_f$peak_end[i]) && smiles_f$peak_end[i] < smiles_f$peak_max[i]) {
smiles_f$peak_end[i] = smiles_f$peak_max[i] + 30
}
i = i + 1
}
# Correct if peak_end is missing
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
for (i in 1:length_diff_IP) {
if (is.na(smiles_f$peak_end[i]) || length(smiles_f$peak_end) < i) {
smiles_f$peak_end[i] = smiles_f$peak_max[i] + 30
}
}
# peak end[i] sup to peak start[i+1]
i = 1
while (i < length(smiles_f$peak_start)) {
if (smiles_f$peak_end[i] > smiles_f$peak_start[i + 1]) {
smiles_f$peak_start = smiles_f$peak_start[-(i+1)]
smiles_f$peak_max = smiles_f$peak_max[-(i+1)]
smiles_f$peak_end = smiles_f$peak_end[-(i+1)]
} else {
i = i + 1
}
}
## Translation in frames
peak_start_frames = smiles_f$peak_start
peak_max_frames = smiles_f$peak_max
peak_end_frames = smiles_f$peak_end
## Translation in time
peak_start_times = data$`Video Time`[smiles_f$peak_start]
peak_max_times = data$`Video Time`[smiles_f$peak_max]
peak_end_times = data$`Video Time`[smiles_f$peak_end]
## Checking
max_length = max(length(peak_start_times), length(peak_max_times), length(peak_end_times))
peak_start_times = c(peak_start_times, rep(NA, max_length - length(peak_start_times)))
peak_max_times = c(peak_max_times, rep(NA, max_length - length(peak_max_times)))
peak_end_times = c(peak_end_times, rep(NA, max_length - length(peak_end_times)))
peak_start_frames = c(peak_start_frames, rep(NA, max_length - length(peak_start_frames)))
peak_max_frames = c(peak_max_frames, rep(NA, max_length - length(peak_max_frames)))
peak_end_frames = c(peak_end_frames, rep(NA, max_length - length(peak_end_frames)))
## Savings
all_smiles[[nom_fichier]] = data.frame(
peak_start_frames = peak_start_frames,
peak_max_frames = peak_max_frames,
peak_end_frames = peak_end_frames,
peak_start_times = peak_start_times,
peak_max_times = peak_max_times,
peak_end_times = peak_end_times
)
print(paste("Sourires détectés pour le fichier:", nom_fichier))
}
# Saving in excel
fichier_excel = file.path(RES_PATH, "detected_smile_V1.xlsx")
wb = createWorkbook()
for (nom in names(all_smiles)) {
addWorksheet(wb, nom)
writeData(wb, nom, all_smiles[[nom]])
}
saveWorkbook(wb, fichier_excel, overwrite = TRUE)
print(paste("Tous les sourires ont été enregistrés dans le fichier:", fichier_excel))
######################### Step 3: compute mimicry scores #######################
col_names = c("video_number", "A_mimicry", "A_smiles", "P_mimicry", "P_smiles")
res_mimicry_smiles_A_P = data.frame(matrix(nrow = 0, ncol = length(col_names)))
colnames(res_mimicry_smiles_A_P) = col_names
video_numbers = unique(sub(" - .", "", names(all_smiles)))
for (video in video_numbers) {
smiles_A = all_smiles[[paste0(video, " - A")]]
smiles_P = all_smiles[[paste0(video, " - P")]]
if (is.null(smiles_A) || is.null(smiles_P)) next
smiles_A = smiles_A[complete.cases(smiles_A), ]
smiles_P = smiles_P[complete.cases(smiles_P), ]
mimicry_count = 0
indices_A_true = integer(0)
indices_P_true = integer(0)
for (i in seq_along(smiles_A[["peak_start_frames"]])) {
for (j in seq_along(smiles_P[["peak_start_frames"]])) {
if (is.na(smiles_A[["peak_end_frames"]][i]) || is.na(smiles_P[["peak_start_frames"]][j]) ||
is.na(smiles_P[["peak_end_frames"]][j]) || is.na(smiles_A[["peak_start_frames"]][i])) {
next
}
condition = (smiles_A[["peak_end_frames"]][i] + 60) >= (smiles_P[["peak_start_frames"]][j] - 60) &&
(smiles_P[["peak_end_frames"]][j] + 60) >= (smiles_A[["peak_start_frames"]][i] - 60)
if (condition) {
mimicry_count = mimicry_count + 1
indices_A_true = c(indices_A_true, i)
indices_P_true = c(indices_P_true, j)
}
}
}
A_mimicry = length(unique(indices_P_true)) / max(1, length(smiles_P[["peak_end_frames"]]))
P_mimicry = length(unique(indices_A_true)) / max(1, length(smiles_A[["peak_end_frames"]]))
A_smiles = length(smiles_A[["peak_end_frames"]])
P_smiles = length(smiles_P[["peak_end_frames"]])
res_mimicry_smiles_A_P = rbind(res_mimicry_smiles_A_P, data.frame(video, A_mimicry, A_smiles, P_mimicry, P_smiles))
}
res_mimicry_smiles_A_P = as.data.frame(res_mimicry_smiles_A_P)
print(res_mimicry_smiles_A_P)
############################ Step 4: indicate the groups #######################
names(group_info)
group_info$CAPR_ID = as.integer(group_info$`CAPR ID`)
res_mimicry_smiles_A_P$video_id = as.integer(gsub("video", "", res_mimicry_smiles_A_P$video))
result_with_group = res_mimicry_smiles_A_P %>%
left_join(group_info[, c("CAPR_ID", "Group")], by = c("video_id" = "CAPR_ID"))
head(result_with_group)
######################### Step 5: descriptive statistics #######################
names(result_with_group)
agg_data = result_with_group %>%
dplyr::filter(!is.na(Group)) %>%
dplyr::group_by(Group) %>%
dplyr::summarise(
mean_P_mimicry = mean(P_mimicry, na.rm = TRUE),
mean_P_smiles = mean(P_smiles, na.rm = TRUE)
)
agg_data_A = result_with_group %>%
dplyr::filter(!is.na(Group)) %>%
dplyr::group_by(Group) %>%
dplyr::summarise(
mean_A_mimicry = mean(A_mimicry, na.rm = TRUE),
mean_A_smiles = mean(A_smiles, na.rm = TRUE)
)
# Participants mimicry
agg_data$Group = factor(agg_data$Group, levels = c("CHR", "HSC", "HC"))
participants_mimicry_plot = ggplot(agg_data, aes(x = Group, y = mean_P_mimicry, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Pariticipants mimicry by group",
x = "Group",
y = "Mimicry") +
theme_minimal()
participants_mimicry_plot
# Assessors mimicry
agg_data_A$Group = factor(agg_data_A$Group, levels = c("CHR", "HSC", "HC"))
assessors_mimicry_plot = ggplot(agg_data_A, aes(x = Group, y = mean_A_mimicry, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Assessors mimicry by group",
x = "Group",
y = "Mimicry") +
theme_minimal()
assessors_mimicry_plot
# Participants smile
agg_data$Group = factor(agg_data$Group, levels = c("CHR", "HSC", "HC"))
participants_smile_plot = ggplot(agg_data, aes(x = Group, y = mean_P_smiles, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Participants smiles by group",
x = "Group",
y = "Smiles") +
theme_minimal()
participants_smile_plot
# Assessors smile
agg_data_A$Group = factor(agg_data_A$Group, levels = c("CHR", "HSC", "HC"))
assessors_smile_plot = ggplot(agg_data_A, aes(x = Group, y = mean_A_smiles, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Assessors smiles by group",
x = "Group",
y = "Smiles") +
theme_minimal()
assessors_smile_plot
View(smiles_A)
View(res_mimicry_smiles_A_P)
View(result_with_group)
################################################################################
########################## Clinical High Risk - mimicry ########################
################################################################################
########################### Step 1: Initialize #################################
### Library
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
library(signal)
library(openxlsx)
library(ggplot2)
### Set directory
PRG_PATH = dirname(rstudioapi::getSourceEditorContext()$path)
PATH = dirname(PRG_PATH)
DAT_PATH = file.path(PATH, "DAT")
LIB_PATH = file.path(PRG_PATH, "LIB")
RES_PATH = file.path(PATH, "RES")
### Execute the function
source(file.path(LIB_PATH, "detect_peaks.R"))
source(file.path(LIB_PATH, "find_negative_crossings.R"))
### Load the group info
group_info = read_excel(paste0(PATH, "/group_info.xlsx"))
########################## Step 2: Detect smiles ###############################
########################### V2: threshold = 0.5 ################################
fichiers = list.files(DAT_PATH, pattern = "\\.xlsx$", full.names = TRUE)
all_smiles = list()
clean_data = function(data) {
data$Happy = as.numeric(as.character(data$Happy))
data$Happy[is.na(data$Happy)] = mean(data$Happy, na.rm = TRUE)
return(data)
}
for (fichier in fichiers) {
nom_fichier = tools::file_path_sans_ext(basename(fichier))
data = read_excel(fichier, skip = 10)
data[data == "FIT FAILED"] = 0
data = clean_data(data)
if (max(data$Happy, na.rm = TRUE) <= 0.5) {
print(paste("Valeur de 'Happy' inférieure à 0.5 pour le fichier:", nom_fichier, "- Passer au suivant."))
next
}
if (any(is.na(data$Happy))) {
stop("Il y a encore des NA dans la colonne Happy après nettoyage.")
}
## Graph
ordre = 1
freq_coupure = 0.05
coefs = butter(ordre, freq_coupure, type = "low")
filtered = filter(coefs, data$Happy)
threshold = 0.5
if (max(filtered, na.rm = TRUE) <= 0.5) {
print(paste("Valeur de 'Happy' inférieure à 0.5 pour le fichier:", nom_fichier, "- Passer au suivant."))
next
}
## Smile detection
signal = filtered
distance_min = 5
indice_max_distance = 50
smiles_f = detect_peaks(signal, threshold, distance_min, indice_max_distance)
smiles_f$peak_end = find_negative_crossings(signal, threshold)
smiles_f$peak_start[is.na(smiles_f$peak_start)] = 0
smiles_f$peak_max[is.na(smiles_f$peak_max)] = 0
smiles_f$peak_end[is.na(smiles_f$peak_end)] = 0
## Correction
# nb of peak
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
i = 1
while (i <= length_diff_IP) {
if (!is.na(smiles_f$peak_end[i]) && smiles_f$peak_end[i] < smiles_f$peak_max[i]) {
smiles_f$peak_end[i] = smiles_f$peak_end[i + 1]
smiles_f$peak_end = smiles_f$peak_end[-(i + 1)]
length_diff_IP = length_diff_IP - 1
} else {
i = i + 1
}
}
# peak_end inf to peak_max
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
i = 1
while (i <= length(smiles_f$peak_start)) {
if (!is.na(smiles_f$peak_end[i]) && smiles_f$peak_end[i] < smiles_f$peak_max[i]) {
smiles_f$peak_end[i] = smiles_f$peak_max[i] + 30
}
i = i + 1
}
# Correct if peak_end is missing
length_diff_IP = max(length(smiles_f$peak_start), length(smiles_f$peak_max), length(smiles_f$peak_end))
for (i in 1:length_diff_IP) {
if (is.na(smiles_f$peak_end[i]) || length(smiles_f$peak_end) < i) {
smiles_f$peak_end[i] = smiles_f$peak_max[i] + 30
}
}
# peak end[i] sup to peak start[i+1]
i = 1
while (i < length(smiles_f$peak_start)) {
if (smiles_f$peak_end[i] > smiles_f$peak_start[i + 1]) {
smiles_f$peak_start = smiles_f$peak_start[-(i+1)]
smiles_f$peak_max = smiles_f$peak_max[-(i+1)]
smiles_f$peak_end = smiles_f$peak_end[-(i+1)]
} else {
i = i + 1
}
}
## Translation in frames
peak_start_frames = smiles_f$peak_start
peak_max_frames = smiles_f$peak_max
peak_end_frames = smiles_f$peak_end
## Translation in time
peak_start_times = data$`Video Time`[smiles_f$peak_start]
peak_max_times = data$`Video Time`[smiles_f$peak_max]
peak_end_times = data$`Video Time`[smiles_f$peak_end]
## Checking
max_length = max(length(peak_start_times), length(peak_max_times), length(peak_end_times))
peak_start_times = c(peak_start_times, rep(NA, max_length - length(peak_start_times)))
peak_max_times = c(peak_max_times, rep(NA, max_length - length(peak_max_times)))
peak_end_times = c(peak_end_times, rep(NA, max_length - length(peak_end_times)))
peak_start_frames = c(peak_start_frames, rep(NA, max_length - length(peak_start_frames)))
peak_max_frames = c(peak_max_frames, rep(NA, max_length - length(peak_max_frames)))
peak_end_frames = c(peak_end_frames, rep(NA, max_length - length(peak_end_frames)))
## Savings
all_smiles[[nom_fichier]] = data.frame(
peak_start_frames = peak_start_frames,
peak_max_frames = peak_max_frames,
peak_end_frames = peak_end_frames,
peak_start_times = peak_start_times,
peak_max_times = peak_max_times,
peak_end_times = peak_end_times
)
print(paste("Sourires détectés pour le fichier:", nom_fichier))
}
# Saving in excel
fichier_excel = file.path(RES_PATH, "detected_smile_V2.xlsx")
wb = createWorkbook()
for (nom in names(all_smiles)) {
addWorksheet(wb, nom)
writeData(wb, nom, all_smiles[[nom]])
}
saveWorkbook(wb, fichier_excel, overwrite = TRUE)
print(paste("Tous les sourires ont été enregistrés dans le fichier:", fichier_excel))
######################### Step 3: compute mimicry scores #######################
col_names = c("video_number", "A_mimicry", "A_smiles", "P_mimicry", "P_smiles")
res_mimicry_smiles_A_P = data.frame(matrix(nrow = 0, ncol = length(col_names)))
colnames(res_mimicry_smiles_A_P) = col_names
video_numbers = unique(sub(" - .", "", names(all_smiles)))
for (video in video_numbers) {
smiles_A = all_smiles[[paste0(video, " - A")]]
smiles_P = all_smiles[[paste0(video, " - P")]]
A_mimicry = 0
P_mimicry = 0
A_smiles = 0
P_smiles = 0
if (!is.null(smiles_A)) {
smiles_A = as.data.frame(smiles_A)
smiles_A = smiles_A[complete.cases(smiles_A), , drop = FALSE]
A_smiles = nrow(smiles_A)
}
if (!is.null(smiles_P)) {
smiles_P = as.data.frame(smiles_P)
smiles_P = smiles_P[complete.cases(smiles_P), , drop = FALSE]
P_smiles = nrow(smiles_P)
}
if (!is.null(smiles_A) && !is.null(smiles_P) && A_smiles > 0 && P_smiles > 0) {
mimicry_count = 0
indices_A_true = integer(0)
indices_P_true = integer(0)
for (i in seq_len(A_smiles)) {
for (j in seq_len(P_smiles)) {
if (is.na(smiles_A$peak_end_frames[i]) || is.na(smiles_P$peak_start_frames[j]) ||
is.na(smiles_P$peak_end_frames[j]) || is.na(smiles_A$peak_start_frames[i])) {
next
}
condition = (smiles_A$peak_end_frames[i] + 60) >= (smiles_P$peak_start_frames[j] - 60) &&
(smiles_P$peak_end_frames[j] + 60) >= (smiles_A$peak_start_frames[i] - 60)
if (condition) {
mimicry_count = mimicry_count + 1
indices_A_true = c(indices_A_true, i)
indices_P_true = c(indices_P_true, j)
}
}
}
A_mimicry = length(unique(indices_P_true)) / max(1, P_smiles)
P_mimicry = length(unique(indices_A_true)) / max(1, A_smiles)
}
res_mimicry_smiles_A_P = rbind(res_mimicry_smiles_A_P, data.frame(video, A_mimicry, A_smiles, P_mimicry, P_smiles))
}
res_mimicry_smiles_A_P = as.data.frame(res_mimicry_smiles_A_P)
print(res_mimicry_smiles_A_P)
############################ Step 4: indicate the groups #######################
names(group_info)
group_info$CAPR_ID = as.integer(group_info$`CAPR ID`)
res_mimicry_smiles_A_P$video_id = as.integer(gsub("video", "", res_mimicry_smiles_A_P$video))
result_with_group = res_mimicry_smiles_A_P %>%
left_join(group_info[, c("CAPR_ID", "Group")], by = c("video_id" = "CAPR_ID"))
head(result_with_group)
######################### Step 5: descriptive statistics #######################
names(result_with_group)
agg_data = result_with_group %>%
dplyr::filter(!is.na(Group)) %>%
dplyr::group_by(Group) %>%
dplyr::summarise(
mean_P_mimicry = mean(P_mimicry, na.rm = TRUE),
mean_P_smiles = mean(P_smiles, na.rm = TRUE)
)
agg_data_A = result_with_group %>%
dplyr::filter(!is.na(Group)) %>%
dplyr::group_by(Group) %>%
dplyr::summarise(
mean_A_mimicry = mean(A_mimicry, na.rm = TRUE),
mean_A_smiles = mean(A_smiles, na.rm = TRUE)
)
# Participants mimicry
agg_data$Group = factor(agg_data$Group, levels = c("CHR", "HSC", "HC"))
participants_mimicry_plot = ggplot(agg_data, aes(x = Group, y = mean_P_mimicry, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Pariticipants mimicry by group",
x = "Group",
y = "Mimicry") +
theme_minimal()
participants_mimicry_plot
# Assessors mimicry
agg_data_A$Group = factor(agg_data_A$Group, levels = c("CHR", "HSC", "HC"))
assessors_mimicry_plot = ggplot(agg_data_A, aes(x = Group, y = mean_A_mimicry, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Assessors mimicry by group",
x = "Group",
y = "Mimicry") +
theme_minimal()
assessors_mimicry_plot
# Participants smile
agg_data$Group = factor(agg_data$Group, levels = c("CHR", "HSC", "HC"))
participants_smile_plot = ggplot(agg_data, aes(x = Group, y = mean_P_smiles, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Participants smiles by group",
x = "Group",
y = "Smiles") +
theme_minimal()
participants_smile_plot
# Assessors smile
agg_data_A$Group = factor(agg_data_A$Group, levels = c("CHR", "HSC", "HC"))
assessors_smile_plot = ggplot(agg_data_A, aes(x = Group, y = mean_A_smiles, fill = Group)) +
geom_bar(stat = "identity") +
labs(title = "Assessors smiles by group",
x = "Group",
y = "Smiles") +
theme_minimal()
assessors_smile_plot
View(result_with_group)
count_by_group <- as.data.frame(table(result_with_group$Group))
colnames(count_by_group) <- c("Group", "Count")
print(count_by_group)
participants_smile_plot
articipants_mimicry_plot
participants_mimicry_plot
